<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="Content.Header" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="hlkCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lblEditTemplateFileHeading.Text" xml:space="preserve">
    <value>Edit Template: {0}</value>
  </data>
  <data name="lblTableDescription.Text" xml:space="preserve">
    <value>This template allows following Tokens in the Template file:</value>
  </data>
  <data name="lblTemplateContent.Help" xml:space="preserve">
    <value>Allows you editing the current template.</value>
  </data>
  <data name="lblTemplateContent.Text" xml:space="preserve">
    <value>Template Content</value>
  </data>
  <data name="lblTemplateHelpHeader.Text" xml:space="preserve">
    <value>Template Help</value>
  </data>
  <data name="lblTemplateNameCaption.Help" xml:space="preserve">
    <value>The template you are currently editing.</value>
  </data>
  <data name="lblTemplateNameCaption.Text" xml:space="preserve">
    <value>Template Name</value>
  </data>
  <data name="plCurrentTemplate.HelpText" xml:space="preserve">
    <value>The current set template.</value>
  </data>
  <data name="plCurrentTemplate.Text" xml:space="preserve">
    <value>Current Template</value>
  </data>
  <data name="ListContent.Header" xml:space="preserve">
    <value>ListContent</value>
    <comment>old</comment>
  </data>
  <data name="ListPresentation.Header" xml:space="preserve">
    <value>ListPresentation</value>
    <comment>old</comment>
  </data>
  <data name="Presentation.Header" xml:space="preserve">
    <value>Presentation</value>
  </data>
  <data name="ContentToolbar.Text" xml:space="preserve">
    <value>SexyContent Toolbar</value>
    <comment>old</comment>
  </data>
  <data name="ListAlternator2.Text" xml:space="preserve">
    <value>Outputs &lt;b&gt;0&lt;/b&gt; or &lt;b&gt;1&lt;/b&gt; depending on items index</value>
    <comment>old</comment>
  </data>
  <data name="ListAlternator3.Text" xml:space="preserve">
    <value>Outputs &lt;b&gt;0&lt;/b&gt;, &lt;b&gt;1&lt;/b&gt; or &lt;b&gt;2&lt;/b&gt; depending on items index</value>
    <comment>old</comment>
  </data>
  <data name="ListAlternator4.Text" xml:space="preserve">
    <value>Outputs &lt;b&gt;0&lt;/b&gt;, &lt;b&gt;1&lt;/b&gt;, &lt;b&gt;2&lt;/b&gt; or &lt;b&gt;3&lt;/b&gt; depending on items index</value>
    <comment>old</comment>
  </data>
  <data name="ListAlternator5.Text" xml:space="preserve">
    <value>Outputs &lt;b&gt;0&lt;/b&gt;, &lt;b&gt;1&lt;/b&gt;, &lt;b&gt;2&lt;/b&gt;, &lt;b&gt;3&lt;/b&gt; or &lt;b&gt;4&lt;/b&gt; depending on items index</value>
    <comment>old</comment>
  </data>
  <data name="ListCount.Text" xml:space="preserve">
    <value>Count of items in the list</value>
    <comment>old</comment>
  </data>
  <data name="ListIndex.Text" xml:space="preserve">
    <value>Index of the current item</value>
    <comment>old</comment>
  </data>
  <data name="ListIsFirst.Text" xml:space="preserve">
    <value>Outputs &lt;b&gt;First&lt;/b&gt; if current item is the first one</value>
    <comment>old</comment>
  </data>
  <data name="ListIsLast.Text" xml:space="preserve">
    <value>Outputs &lt;b&gt;Last&lt;/b&gt; if current item is the last one</value>
    <comment>old</comment>
  </data>
  <data name="ListRepeat.Text" xml:space="preserve">
    <value>Allows defining the repeating part of the template</value>
    <comment>old</comment>
  </data>
  <data name="ListToolbar.Text" xml:space="preserve">
    <value>Outputs the toolbar to edit list information</value>
  </data>
  <data name="ListIndex1.Text" xml:space="preserve">
    <value>Index of the current item + 1 (for numbering lists)</value>
    <comment>old</comment>
  </data>
  <data name="plTemplateLocation.HelpText" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="plTemplateLocation.Text" xml:space="preserve">
    <value>Template Location</value>
  </data>
  <data name="AdditionalRazorSets.Text" xml:space="preserve">
    <value>SystemRazor,ListRazor,AppRazor</value>
  </data>
  <data name="AdditionalTokenSets.Text" xml:space="preserve">
    <value>SystemTokens,ListTokens,AppTokens,PortalTokens,TabTokens,ModuleTokens,QueryStringTokens,UserTokens,ProfileTokens</value>
  </data>
  <data name="AppRazor.List" xml:space="preserve">
    <value>@App.Path=returns the url to the current app, for integrating scripts, images etc. For example, use as @App.Path/scripts/knockout.js
@App.PhysicalPath=physical path, in c:\
@App.AppGuid=internal GUID - should stay the same across all systems for this specific App
@App.AppId=ID in the current DB. Is a different number in every App-Installation
@App.Name=internal name
@App.Folder=folder
@App.Resources.ANYKEY=any resource defined in the App - usually used for multilanguage labels like @App.Resources.FirstName
@App.Settings.ANYKEY=any type of setting defined in the App - usually used for configuration like details-pages @App.Settings.DetailsLink</value>
  </data>
  <data name="AppTokens.List" xml:space="preserve">
    <value>[App:Path]=returns the url to the current app, for integrating scripts, images etc. For example, use as [App:Path]/scripts/knockout.js
[App:PhysicalPath]=the physical path, in case you want access to the C:\path for some reason
[App:Resources:...]=any resource defined in the App - usually used for multilanguage labels like [App:Resources:FirstName]
[App:Settings:...]=any type of setting defined in the App - usually used for configuration like details-pages [App:Settings:DetailsLink]</value>
  </data>
  <data name="ListRazor.List" xml:space="preserve">
    <value>@ListContent.Toolbar«Toolbar for inline editing with 2sxc. If used inside a &lt;div class="sc-element"&gt; then the toolbar will float»
	&lt;ul&gt;
	@foreach(var e in List) {
		var Content = e.Content;
		&lt;li class="sc-element"&gt;
			@Html.Raw(Content.Toolbar)
			@Content.EntityTitle
		&lt;/li&gt;
	}
	&lt;/ul&gt;«Demo-Loop how to cycle through items»</value>
  </data>
  <data name="ListTokens.List" xml:space="preserve">
    <value>[Content:Repeater:Index]=Index of the current item
[Content:Repeater:Index1]=Index of the current item + 1 (for numbering lists)
[Content:Repeater:Count]=Count of items in the list
[Content:Repeater:IsFirst]=Outputs &lt;b&gt;First&lt;/b&gt; if current item is the first one
[Content:Repeater:IsLast]=Outputs &lt;b&gt;Last&lt;/b&gt; if current item is the last one
[Content:Repeater:Alternator2]=Outputs &lt;b&gt;0&lt;/b&gt; or &lt;b&gt;1&lt;/b&gt; depending on items index
[Content:Repeater:Alternator3]=Outputs &lt;b&gt;0&lt;/b&gt;, &lt;b&gt;1&lt;/b&gt; or &lt;b&gt;2&lt;/b&gt; depending on items index
[Content:Repeater:Alternator4]=Outputs &lt;b&gt;0&lt;/b&gt;, &lt;b&gt;1&lt;/b&gt;, &lt;b&gt;2&lt;/b&gt; or &lt;b&gt;3&lt;/b&gt; depending on items index
[Content:Repeater:Alternator5]=Outputs &lt;b&gt;0&lt;/b&gt;, &lt;b&gt;1&lt;/b&gt;, &lt;b&gt;2&lt;/b&gt;, &lt;b&gt;3&lt;/b&gt; or &lt;b&gt;4&lt;/b&gt; depending on items index
[ListContent:Toolbar]=Outputs the toolbar to edit list information
&amp;lt;repeat repeat&amp;#61;&amp;quot;Employee in Data:Default&amp;quot;&amp;gt;...[Employee:...]...&amp;lt;/repeat&amp;gt;=Allows defining the repeating part of the template
&lt;a href&amp;#61;"http://2sxc.org/help"&gt;Learn more&lt;/a&gt;=More help on 2sxc.org/help</value>
  </data>
  <data name="ListTokens.Title" xml:space="preserve">
    <value>List System</value>
    <comment>temp</comment>
  </data>
  <data name="ModuleTokens.List" xml:space="preserve">
    <value>[Module:Description]=Module Definition Description 
[Module:EndDate]=Module Display Until Date 
[Module:Footer]=Module Footer Text 
[Module:FriendlyName]=Module Definition Name 
[Module:Header]=Module Header Text 
[Module:HelpURL]=Module Help URL 
[Module:IconFile]=Module Path to Icon File 
[Module:ModuleTitle]=Module Title 
[Module:PaneName]=Module Name of Pane (where the module resides) 
[Module:StartDate]=Module Display from Date</value>
  </data>
  <data name="ModuleTokens.Title" xml:space="preserve">
    <value>Module Tokens</value>
    <comment>n</comment>
  </data>
  <data name="PortalTokens.List" xml:space="preserve">
    <value>[Portal:Currency]=Currency String 
[Portal:Description]=Portal Description 
[Portal:Email]=Portal Admin Email 
[Portal:FooterText]=Portal Copyright Text 
[Portal:HomeDirectory]=Portal Path (relative) of Home Directory 
[Portal:LogoFile]=Portal Path to Logo File 
[Portal:PortalName]=Portal Name 
[Portal:PortalAlias]=Portal URL 
[Portal:TimeZoneOffset]=Difference in Minutes between Portal Default Time and UTC</value>
  </data>
  <data name="PortalTokens.Title" xml:space="preserve">
    <value>Portal Tokens</value>
    <comment>n</comment>
  </data>
  <data name="ProfileTokens.List" xml:space="preserve">
    <value>[Profile:]=Use any default or custom Profile Property as listed in Profile Property Definition section of Manage User Accounts. Use non-localized Property Name only.</value>
  </data>
  <data name="ProfileTokens.Title" xml:space="preserve">
    <value>User Profile Tokens</value>
    <comment>n</comment>
  </data>
  <data name="QueryStringTokens.List" xml:space="preserve">
    <value>[Querystring:Name]=Value of Querystring Name</value>
  </data>
  <data name="QueryStringTokens.Title" xml:space="preserve">
    <value>QueryString (URL-Parameters) Tokens</value>
    <comment>n</comment>
  </data>
  <data name="SystemRazor.List" xml:space="preserve">
    <value>@Content.Toolbar=SexyContent Toolbar</value>
  </data>
  <data name="SystemTokens.List" xml:space="preserve">
    <value>[Content:Toolbar]=Toolbar for inline editing with 2sxc. If used inside a &amp;lt;div class&amp;equals;&amp;quot;sc-element&amp;quot;&amp;gt; then the toolbar will float</value>
  </data>
  <data name="SystemTokens.Title" xml:space="preserve">
    <value>ContentFeatures</value>
    <comment>temp</comment>
  </data>
  <data name="TabTokens.List" xml:space="preserve">
    <value>[Tab:Description]=Page Description Text for Search Engine 
[Tab:EndDate]=Page Display Until Date 
[Tab:FullUrl]=Page Full URL 
[Tab:IconFile]=Page Relative Path to Icon File 
[Tab:KeyWords]=Page Keywords for Search Engine 
[Tab:PageHeadText]=Page Header Text 
[Tab:StartDate]=Page Display from Date 
[Tab:TabName]=Page Name 
[Tab:TabPath]=Page Relative Path 
[Tab:Title]=Page Title (Window Title) 
[Tab:URL]=Page URL</value>
  </data>
  <data name="TabTokens.Title" xml:space="preserve">
    <value>Tab (Page) Tokens</value>
    <comment>n</comment>
  </data>
  <data name="TimeTokens.List" xml:space="preserve">
    <value>[DateTime:Now]=Current Date and Time 
[Ticks:Now]=CPU Tick Count for Current Second 
[Ticks:Today]=CPU Tick Count since Midnight 
[Ticks:TicksPerDay]=CPU Ticks per Day (for calculations)</value>
  </data>
  <data name="TimeTokens.Title" xml:space="preserve">
    <value>Time Tokens</value>
    <comment>n</comment>
  </data>
  <data name="UserTokens.List" xml:space="preserve">
    <value>[User:DisplayName]=User’s Display Name 
[User:Email]=User’s Email Address 
[User:FirstName]=User’s First Name 
[User:FullName]=(deprecated)
[User:LastName]=User’s Last Name 
[User:Username]=User’s Login User Name</value>
  </data>
  <data name="UserTokens.Title" xml:space="preserve">
    <value>User Tokens</value>
    <comment>n</comment>
  </data>
</root>