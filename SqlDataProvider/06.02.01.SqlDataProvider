-- make sure sql rolls back automatically in case of error.
SET XACT_ABORT ON

BEGIN TRANSACTION SexyContentUpdate;

-- Create Table ContextInfo for SQL Azure Compatibility
EXEC('CREATE TABLE [ToSIC_EAV_ContextInfo] (
	[ContextInfo] varbinary(128) not null,
	[ChangeID] nvarchar(128) not null,
	[UpdatedAt] datetime NOT NULL,
	CONSTRAINT [PK_ToSIC_EAV_ContextInfo] PRIMARY KEY CLUSTERED ([ContextInfo] ASC)
)')

-- Update ToSIC_EAV_ChangeLogSet for SQL Azure Compatibility
EXEC('ALTER PROCEDURE ToSIC_EAV_ChangeLogSet
  @ChangeID int
AS

SET NOCOUNT ON

-- Remove all context items older than an 5 minutes ago
DELETE FROM [ToSIC_EAV_ContextInfo] WHERE [UpdatedAt] < DATEADD(mi, -5, GETUTCDATE())

IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
BEGIN
    DECLARE @b varbinary(128)
    SET @b = CONVERT(varbinary(128),newid())
    EXEC sp_executesql @statement=N''SET CONTEXT_INFO @b'',@params=N''@b varbinary(128)'',@b=@b
	print @b
END

DECLARE @ContextInfo varbinary(128)
SELECT @ContextInfo = CONTEXT_INFO()

IF EXISTS (SELECT * FROM [ToSIC_EAV_ContextInfo] WHERE [ContextInfo] = @ContextInfo)
	UPDATE [ToSIC_EAV_ContextInfo]
	SET
		[ChangeID] = @ChangeID,
		[UpdatedAt] = GETUTCDATE()
	WHERE
		ContextInfo = @ContextInfo
ELSE
	INSERT INTO [ToSIC_EAV_ContextInfo] ([ContextInfo], [ChangeID], [UpdatedAt]) VALUES (@ContextInfo, @ChangeID, GETUTCDATE());')

-- Add ToSIC_EAV_ChangeLogGet
EXEC('CREATE PROCEDURE [ToSIC_EAV_ChangeLogGet]
AS
    SET NOCOUNT ON
    DECLARE @ContextInfo varbinary(128)
    SELECT @ContextInfo = CONTEXT_INFO()

	DECLARE @ChangeID int
	SET @ChangeID = 0

    SELECT @ChangeID = [ChangeID]
    FROM [ToSIC_EAV_ContextInfo]
    WHERE [ContextInfo] = @ContextInfo

	RETURN @ChangeID')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Apps]    Script Date: 28.08.2014 09:04:35 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('ALTER TRIGGER [AutoLogAllChangesToTimeline_Apps]
   ON  [ToSIC_EAV_Apps]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AppID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AppID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_AssignmentObjectTypes]    Script Date: 28.08.2014 09:08:32 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_AssignmentObjectTypes]
   ON  [ToSIC_EAV_AssignmentObjectTypes]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AssignmentObjectTypeID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AssignmentObjectTypeID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_AttributeGroups]    Script Date: 28.08.2014 09:09:11 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_AttributeGroups]
   ON  [ToSIC_EAV_AttributeGroups]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeGroupID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeGroupID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Attributes]    Script Date: 28.08.2014 09:10:17 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_Attributes]
   ON  [ToSIC_EAV_Attributes]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_AttributeSets]    Script Date: 28.08.2014 09:11:17 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_AttributeSets]
   ON  [ToSIC_EAV_AttributeSets]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeSetID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeSetID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_AttributesInSets]    Script Date: 28.08.2014 09:11:48 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_AttributesInSets]
   ON  [ToSIC_EAV_AttributesInSets]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeSetID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeSetID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Dimensions]    Script Date: 28.08.2014 09:12:22 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_Dimensions]
   ON  [ToSIC_EAV_Dimensions]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = DimensionID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = DimensionID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Entities]    Script Date: 28.08.2014 09:13:02 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_Entities]
   ON  [ToSIC_EAV_Entities]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = EntityID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = EntityID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_EntityRelationships]    Script Date: 28.08.2014 09:13:24 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_EntityRelationships]
   ON  [ToSIC_EAV_EntityRelationships]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ParentEntityID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ParentEntityID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Values]    Script Date: 28.08.2014 09:13:52 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_Values] 
   ON  [ToSIC_EAV_Values]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ValueID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ValueID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_ValuesDimensions]    Script Date: 28.08.2014 09:14:12 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
ALTER TRIGGER [AutoLogAllChangesToTimeline_ValuesDimensions]
   ON  [ToSIC_EAV_ValuesDimensions]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ValueID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ValueID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Zones]    Script Date: 28.08.2014 09:14:33 ******/
EXEC('SET ANSI_NULLS ON')
EXEC('SET QUOTED_IDENTIFIER ON')
EXEC('ALTER TRIGGER [AutoLogAllChangesToTimeline_Zones]
   ON  [ToSIC_EAV_Zones]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	EXEC @sysLogId = [ToSIC_EAV_ChangeLogGet]
	IF @sysLogId = 0
	BEGIN
		RAISERROR (''ChangeLogID is not set'', 0, 1)
		RETURN
	END

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ZoneID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ZoneID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData
END')

-- Fix some Key-Names to match Name-Schema
EXEC('EXEC sp_rename ''PK_Ext_AssignmentObjectTypes'', ''PK_ToSIC_EAV_AssignmentObjectTypes''')
EXEC('EXEC sp_rename ''PK_Attachments'', ''PK_ToSIC_EAV_Attachments''')
EXEC('EXEC sp_rename ''PK_Ext_Keys'', ''PK_ToSIC_EAV_Attributes''')
EXEC('EXEC sp_rename ''PK_Ext_Extensions'', ''PK_ToSIC_EAV_AttributeSets''')
EXEC('EXEC sp_rename ''PK_ToSIC_EAV_Types'', ''PK_ToSIC_EAV_AttributeTypes''')
EXEC('EXEC sp_rename ''PK_Ext_ValueSets'', ''PK_ToSIC_EAV_Entities''')
EXEC('EXEC sp_rename ''PK_Ext_Values'', ''PK_ToSIC_EAV_Values''')


-- Commit the transaction
COMMIT TRANSACTION SexyContentUpdate;
--ROLLBACK TRANSACTION SexyContentUpdate;

GO