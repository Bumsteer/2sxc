
-- Script Block for 2SexyContent 05.05.00 Update
-- ---------------------------------------------
-- This SQL Script Block must be included in every .SqlDataProvider file
-- for 2SexyContent <= 05.05.00 because of the rename of the internal
-- module name. It does not have to be included for newer SQL scripts.
-- This script changes the module name and the breaks the installation
-- so the DNN cache is refreshed. After the upgrade is triggered again,
-- the installation works.

DECLARE @IsUpgradeFromPreviousVersion int
SELECT @IsUpgradeFromPreviousVersion = CASE WHEN EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}DesktopModules WHERE ModuleName = N'2SexyContent') THEN CAST (1 AS BIT) ELSE CAST (0 AS BIT) END

If @IsUpgradeFromPreviousVersion = 1
BEGIN
	UPDATE       {databaseOwner}{objectQualifier}DesktopModules
	SET                ModuleName = N'2sxc'
	WHERE        (ModuleName = N'2SexyContent')

	RAISERROR(N'Please run this upgrade again to finish the process. This is a necessary step because of the internal rename of the 2SexyContent module. ************************************************************************************************************************************************************************** PLEASE RUN THIS UPGRADE AGAIN TO FINISH THE PROCESS. This is a necessary step because of the internal rename of the 2SexyContent module. **************************************************************************************************************************************************************************', 16, 1)
	RETURN
END

-- End of the Script Block for 2SexyContent 05.05.00 Update

-- make sure sql rolls back automatically in case of error.
SET XACT_ABORT ON

BEGIN TRANSACTION SexyContentUpdate;

/****** Object:  Table [ToSIC_EAV_DataTimeline]    Script Date: 29.04.2013 14:20:29 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

EXEC('CREATE TABLE [ToSIC_EAV_DataTimeline](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SourceTable] [nvarchar](250) NOT NULL,
	[SourceID] [int] NULL,
	[SourceGuid] [uniqueidentifier] NULL,
	[SourceTextKey] [nvarchar](250) NULL,
	[Operation] [nchar](1) NOT NULL,
	[SysCreatedDate] [datetime] NOT NULL,
	[SysLogID] [int] NULL,
	[NewData] [xml] NOT NULL,
 CONSTRAINT [PK_ToSIC_EAV_DataTimeline] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)
) TEXTIMAGE_ON [PRIMARY]');



EXEC('ALTER TABLE [ToSIC_EAV_DataTimeline] ADD  CONSTRAINT [DF_DataTimeline_Operation]  DEFAULT (N''I'') FOR [Operation]');


/****** Object:  StoredProcedure [ToSIC_EAV_LogToTimeline]    Script Date: 29.04.2013 14:20:44 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Logs a record change (Insert/Update/Delete) to the DataTimeline
-- =============================================
EXEC('CREATE PROCEDURE [ToSIC_EAV_LogToTimeline] 
	-- Add the parameters for the stored procedure here
	@table nvarchar(250) = '''', 
	@sourceID int = null,
	@sourceGuid uniqueidentifier = null,
	@sourceTextKey nvarchar(250) = null,
	@operation nchar(1),
	@sysCreated datetime = null,
	@sysChangeLogId int = null,
	@newData xml

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Set @operation = Lower(@operation)	-- convert D-->d, U-->u, I-->i

	if @operation = ''d''
		Begin
			Select @newData = ''<d/>''
		End

    -- Insert statements for procedure here
	INSERT INTO [ToSIC_EAV_DataTimeline]
           ([SourceTable]
           ,[SourceID]
           ,[SourceGuid]
           ,[SourceTextKey]
           ,[Operation]
           ,[SysCreatedDate]
           ,[SysLogID]
           ,[NewData])
     VALUES
           (@table
           ,@sourceID
           ,@sourceGuid
           ,@sourceTextKey
           ,@operation
           ,@sysCreated
           ,@sysChangeLogId
           ,@newData)
END');

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Values]    Script Date: 29.04.2013 14:21:13 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_Values] 
   ON  [ToSIC_EAV_Values]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ValueID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ValueID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');

/****** Object:  Trigger [AutoLogAllChangesToTimeline_Entities]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_Entities]
   ON  [ToSIC_EAV_Entities]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = EntityID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = EntityID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_Apps]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_Apps]
   ON  [ToSIC_EAV_Apps]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AppID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AppID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_AssignmentObjectTypes]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');


-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_AssignmentObjectTypes]
   ON  [ToSIC_EAV_AssignmentObjectTypes]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AssignmentObjectTypeID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AssignmentObjectTypeID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_AttributeGroups]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_AttributeGroups]
   ON  [ToSIC_EAV_AttributeGroups]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeGroupID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeGroupID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_Attributes]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_Attributes]
   ON  [ToSIC_EAV_Attributes]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_AttributeSets]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_AttributeSets]
   ON  [ToSIC_EAV_AttributeSets]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml

	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeSetID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeSetID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_Dimensions]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_Dimensions]
   ON  [ToSIC_EAV_Dimensions]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml

	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = DimensionID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = DimensionID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_Zones]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_Zones]
   ON  [ToSIC_EAV_Zones]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ZoneID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ZoneID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_ValuesDimensions]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_ValuesDimensions]
   ON  [ToSIC_EAV_ValuesDimensions]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml

	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ValueID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ValueID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  Trigger [AutoLogAllChangesToTimeline_AttributesInSets]    Script Date: 29.04.2013 14:24:57 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [AutoLogAllChangesToTimeline_AttributesInSets]
   ON  [ToSIC_EAV_AttributesInSets]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = AttributeSetID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = AttributeSetID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');


/****** Object:  StoredProcedure [ToSIC_EAV_ChangeLogAdd]    Script Date: 14.06.2013 11:27:47 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Benjamin Gemperle
-- Create date: 2013-04-29
-- Description:	Add EAV ChangeLog
-- =============================================
EXEC('CREATE PROCEDURE [ToSIC_EAV_ChangeLogAdd] 
	-- Add the parameters for the stored procedure here
	@User nvarchar(255) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	--SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [ToSIC_EAV_ChangeLog] ([Timestamp] ,[User])
     VALUES (GetDate(), @user)

	DECLARE @ChangeID int
	SET @ChangeID = scope_identity()
	EXEC ToSIC_EAV_ChangeLogSet @ChangeID

	SELECT *
	FROM [ToSIC_EAV_ChangeLog]
	WHERE [ChangeID] = @ChangeID
END');



/****** Object:  StoredProcedure [ToSIC_EAV_ChangeLogSet]    Script Date: 14.06.2013 12:08:14 ******/
EXEC('SET ANSI_NULLS ON');

EXEC('SET QUOTED_IDENTIFIER ON');

-- =============================================
-- Author:		Benjamin Gemperle
-- Create date: 2013-06-14
-- Description:	Set 
-- =============================================
EXEC('CREATE PROCEDURE [ToSIC_EAV_ChangeLogSet] 
	-- Add the parameters for the stored procedure here
	@ChangeID int
AS
BEGIN
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure''
	BEGIN
		EXEC(''IF CONTEXT_INFO() IS NOT NULL
		BEGIN
			RAISERROR (''''CONTEXT_INFO must contain ChangeLogID'''', 0, 1)
			RETURN
		END

		SET CONTEXT_INFO '' + @ChangeID)
	END
END');



-- Commit the transaction
COMMIT TRANSACTION SexyContentUpdate;
--ROLLBACK TRANSACTION SexyContentUpdate;

GO